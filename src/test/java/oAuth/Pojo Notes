POJO Classes (Plain Old Java Objects)

Definition: POJO classes are simple Java classes that contain:
    Private fields (to store data).
    Public getter and setter methods (to access and modify data).
    Public no-argument constructor (for instantiating objects).
    
Usage:
    POJOs are primarily used to represent request and response data in various contexts like APIs.
    They are used for serialization and deserialization when dealing with requests and responses.
    POJOs are also used to create user-friendly methods, making the code more readable and easier to debug and maintain.

Serialization and Deserialization
    Serialization: The process of converting a Java object into a request body (payload) that can be sent over the network in JSON or XML format.
        In Rest Assured, this typically refers to converting Java objects to JSON or XML to send in HTTP requests.

    Deserialization: The process of converting a response body (in JSON or XML) back into a Java object.
        In Rest Assured, this refers to converting the received response body (in JSON or XML format) back into Java objects to extract values more easily.

Serialization & Deserialization in Rest Assured
    Purpose:
        Simplifies the process of converting Java objects to request payloads and vice versa.
        Helps in extracting data from responses by mapping them into Java objects.
        Makes code more readable, maintainable, and easier to debug.
        Serialization creates the request body (payload) from Java objects, while deserialization converts the response     body into Java objects for further manipulation.

Why Serialization and Deserialization?

Serialization: Needed to convert a Java object into a request body (payload) before sending a request to an API.
Deserialization: Needed to convert the response body back into a Java object to easily extract and manipulate data.

Advantages of Serialization and Deserialization
    Easy parsing and extraction: JSON or XML response values are mapped into Java objects, simplifying the extraction process.
    User-friendly methods: The code is more readable by using Java objects and methods to interact with requests and responses.
    Maintainability and debugging: The code becomes easier to maintain and debug due to a structured and organized approach.
    Payload creation: Serialization simplifies the creation of request and response payloads for APIs.

Design Approach
    Java objects are created based on the POJO classes which represent the request and response payloads.
    Once the Java object is constructed, it is serialized into the request body for sending to the API.
    After receiving the response body, it is deserialized back into a Java object to extract values easily.

Additional Libraries for Serialization/Deserialization
For JSON: You need libraries such as:
    Jackson
    Jackson2
    Gson
    Johnzon
For XML: 
    You need the JAXB library for XML serialization and deserialization.
    
-----------
    
POJO Classes (Plain Old Java Objects)
Think of a POJO as a basic container for holding information. Imagine a box where you can store data (like a person's name, age, and address). A POJO class is a regular Java class that just holds some data with:

Private fields: These are like the items inside the box. They store the actual data (e.g., a name or an age).

Getter and setter methods: These are like instructions for how to get or change the data inside the box. Getters allow you to open the box and view the data, while setters allow you to change what's inside.

A no-argument constructor: This is a default way to create a box without needing any special instructions.

Why Use POJOs?
POJOs are often used in APIs (systems that let different software communicate). For example, when a system sends a request to another system, it might need to pass along a lot of information like a user's details. POJOs are perfect for this because they organize the data in a simple, clear way.

They are used to convert data back and forth, which makes the code easier to understand and debug.

Serialization and Deserialization
Serialization and Deserialization are processes that make it easy to send and receive data over the internet. Imagine you have a box (a POJO object) that you want to send to someone else. You need to convert that box into a format that can be easily sent over a network (like a letter or email). This is serialization.

On the other side, when someone receives your box (in the form of data like JSON or XML), they need to deserialize it, which means turning the received data back into a usable box (the POJO object) that they can work with.

Serialization: Converting your box (POJO) into a format (like JSON) so you can send it over the internet.

Deserialization: Turning the received format (like JSON) back into a box (POJO) so you can use the data.

Why Do We Need Serialization and Deserialization?
Serialization is useful when you want to send information (like a user's details) from one system to another, especially in API calls.

Deserialization is needed to take the information received (usually in formats like JSON or XML) and turn it into something your program can easily work with.

The Benefit
Ease of Use: Instead of manually converting data, tools like Rest Assured automatically handle the conversion, making it easier for you to send and receive data.

Clear Code: Using POJOs makes the code more organized and readable, so developers can work with it easily.

Libraries for Serialization and Deserialization
To make this process easier, there are tools (libraries) like:

Jackson or Gson for JSON: These tools help convert Java objects into JSON and vice versa.

JAXB for XML: This is a tool to help with converting Java objects into XML format and back.

In short, POJOs help you store and organize data, while serialization and deserialization help you send and receive that data easily over the internet in a format that is understandable to both the sending and receiving systems.



    